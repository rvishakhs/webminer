// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Workflow {
    id String @id @default(cuid())
    userId String
    name String
    description String?
    
    definition String?
    executionPlan String?
    status String  

    cron String?

    lastRunAt   DateTime?
    lastRunId   String?
    lastRunStatus   String?
    nextRunAt   DateTime?
    
    CreatedAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    executions  WorkflowExecution[]

    // User cannot have two workflow with the same id 
    @@unique([name, userId])
    
}

model WorkflowExecution {
    id          String  @id     @default(cuid())
    workflowId  String
    userId      String
    trigger     String
    status      String
    createdAt   DateTime    @default(now())
    startedAt   DateTime?
    completedAt DateTime?
    definition  String  @default("{}")

    phases      ExecutionPhase[]


    workflow    Workflow    @relation(fields:   [workflowId], references:[id],   onDelete: Cascade)
}



model ExecutionPhase {
    id          String  @id     @default(cuid())
    userId      String
    status      String
    number      Int
    node        String 
    name        String
    startedAt   DateTime?
    completedAt DateTime?
    inputs      String?
    outputs     String?

    creditsCost Int?

    workflowExecutionId String
    execution   WorkflowExecution   @relation(fields:   [workflowExecutionId],  references:[id], onDelete: Cascade)

    logs    ExecutionLog[]
}

model ExecutionLog {
    id          String      @id @default(cuid())
    logLevel    String
    message     String
    timestamp   DateTime    @default(now())

    executionPhaseId    String
    executionPhase    ExecutionPhase  @relation(fields: [executionPhaseId], references:[id], onDelete:Cascade)

}

model Credential {
    id      String  @id @default(cuid())
    userId  String
    name    String
    value   String

    createdAt   DateTime    @default(now())
    @@unique([userId, name])   
}